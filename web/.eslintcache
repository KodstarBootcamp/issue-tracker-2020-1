[{"/home/ufuk/issue-tracker-2020-1/web/src/pages/Home.js":"1","/home/ufuk/issue-tracker-2020-1/web/src/components/DisplayIssues.js":"2","/home/ufuk/issue-tracker-2020-1/web/src/pages/EditIssue.js":"3","/home/ufuk/issue-tracker-2020-1/web/src/pages/CreateIssue.js":"4","/home/ufuk/issue-tracker-2020-1/web/src/index.js":"5","/home/ufuk/issue-tracker-2020-1/web/src/App.js":"6"},{"size":481,"mtime":1608908939418,"results":"7","hashOfConfig":"8"},{"size":1906,"mtime":1609000331148,"results":"9","hashOfConfig":"8"},{"size":4594,"mtime":1608930537173,"results":"10","hashOfConfig":"8"},{"size":4211,"mtime":1608929618447,"results":"11","hashOfConfig":"8"},{"size":241,"mtime":1608908939418,"results":"12","hashOfConfig":"8"},{"size":484,"mtime":1608908939418,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3y1es",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ufuk/issue-tracker-2020-1/web/src/pages/Home.js",[],["28","29"],"/home/ufuk/issue-tracker-2020-1/web/src/components/DisplayIssues.js",[],"/home/ufuk/issue-tracker-2020-1/web/src/pages/EditIssue.js",["30","31"],"import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nfunction EditIssue(props) {\n  let history = useHistory();\n\n  // get id of the issue to edit\n  const id = props.match.params.id;\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [labels, setLabels] = useState([]);\n  const [preselect, setPreselect] = useState([]);\n  const [options, setOptions] = useState([\n    { Label: \"Bug\" },\n    { Label: \"Enhancement\" },\n    { Label: \"Question\" },\n    { Label: \"Suggestion\" },\n    { Label: \"Critical\" },\n  ]);\n\n  useEffect(async () => {\n    const URL = \"http://localhost:5000/issues/\";\n    const response = await Axios.get(URL + id);\n    console.log(response);\n\n    const { title, description, labels } = response.data;\n    setTitle(title);\n    setDescription(description);\n\n    const select = options.filter(\n      (item) => labels.includes(item.Label) === true\n    );\n    setPreselect(select);\n  }, []);\n\n  const titleHandler = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const descriptionHandler = (event) => {\n    setDescription(event.target.value);\n  };\n\n  const validate = (newIssue) => {\n    if (newIssue.title.length < 1) {\n      alert(\"Title cannot be left blank\");\n      return false;\n    } else if (newIssue.title.length > 250) {\n      alert(\"Title cannot exceed 250 characters\");\n      return false;\n    } else if (newIssue.description.length > 1500) {\n      alert(\"Description cannot exceed 1500 characters\");\n      return false;\n    }\n    return true;\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n\n    let labelText;\n    if (Object.values(labels).length < 1) {\n      labelText = [];\n    } else {\n      labelText = labels.data.map((item) => item.Label);\n    }\n\n    const UpdatedIssue = {\n      title: title,\n      description: description,\n      labels: labelText,\n    };\n\n    const URL = \"http://localhost:5000/issues/\";\n\n    if (validate(UpdatedIssue)) {\n      const response = await Axios.put(URL + id, UpdatedIssue);\n      console.log(response);\n      alert(\"Succesfully edited\");\n      history.push(\"/\");\n    }\n  };\n\n  const addLabelHandler = () => {\n    const labelName = prompt(\"Please enter  label name\", \"\");\n    if (labelName === null) {\n      return;\n    }\n    if (labelName.length < 1) {\n      alert(\"Title can not be left blank\");\n      return;\n    }\n\n    const newLabelObject = {\n      Label: labelName.charAt(0).toUpperCase() + labelName.slice(1),\n    };\n\n    setOptions([...options, newLabelObject]);\n  };\n\n  return (\n    <form className=\"w-75 ml-auto mr-auto mt-5\">\n      <div className=\"form-group\">\n        <label htmlFor=\"exampleFormControlInput1\"> Title </label>\n        <input\n          required\n          value={title}\n          onChange={titleHandler}\n          type=\"text\"\n          className=\"form-control\"\n          id=\"exampleFormControlInput1\"\n          placeholder=\"Please add issue title\"\n        />\n      </div>\n      <div className=\"form-group mt-5\">\n        <label htmlFor=\"exampleFormControlTextarea1\"> Issue Description </label>\n        <textarea\n          value={description}\n          placeholder=\"Add descriptive explanation\"\n          onChange={descriptionHandler}\n          className=\"form-control\"\n          id=\"exampleFormControlTextarea1\"\n          rows=\"3\"\n        ></textarea>\n      </div>\n      <div className=\"d-flex \">\n        <div className=\"form-group  flex-grow-1 mt-3\">\n          <label htmlFor=\"exampleFormControlSelect1\"> Label selection </label>\n          <Multiselect\n            options={options}\n            selectedValues={preselect}\n            displayValue=\"Label\"\n            onSelect={(data) => setLabels({ ...data, data })}\n            onRemove={(data) => setLabels({ ...data, data })}\n            emptyRecordMsg=\"No options available. Add new one\"\n          />\n        </div>\n        <div>\n          <button\n            onClick={addLabelHandler}\n            type=\"button\"\n            className=\"btn btn-success mt-5 ml-3\"\n          >\n            Add New Label\n          </button>\n        </div>\n      </div>\n\n      <div className=\"d-flex mt-5 justify-content-between\">\n        <button onClick={submitHandler} className=\"btn btn-primary\">\n          Submit\n        </button>\n        <Link to=\"/\">\n          <p style={{ textDecoration: \"underline\" }}>Back to Home Page</p>\n        </Link>\n      </div>\n    </form>\n  );\n}\n\nexport default EditIssue;\n","/home/ufuk/issue-tracker-2020-1/web/src/pages/CreateIssue.js",[],"/home/ufuk/issue-tracker-2020-1/web/src/index.js",[],"/home/ufuk/issue-tracker-2020-1/web/src/App.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":25,"column":13,"nodeType":"38","endLine":38,"endColumn":4},{"ruleId":"36","severity":1,"message":"39","line":38,"column":6,"nodeType":"40","endLine":38,"endColumn":8,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'id' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["44"],"no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [id, options]",{"range":"47","text":"48"},[1128,1130],"[id, options]"]